<?xml version="1.0" ?>
<launch>
    <!-- If mode = sim: Simulated AUV with MBES and control in loaded bathymetric map 
	If mode = gt: reproduce Hugin survey and construct map of real bathymetry --> 
    <arg name="mode" default="sim"/>
	<arg name="namespace" default="hugin"/>
	<arg name="dataset" default="overnight_2020"/>
    <arg name="app" default="pf"/>
    <arg name="debug" default="0"/>
    <arg name="multi_agent" default="false"/>
    <arg name="nr" default="1"/>

	<!-- Rates for simulating missions  -->
    <arg name="odom_rate" default="0.1"/>
	<arg name="meas_rate" default="0.1"/>
	
	<!-- MBES sensor -->
	<arg name="n_beams_mbes" default="100"/>	
	<arg name="mbes_open_angle" default="1.0" />

    <!-- Real data  -->
    <arg name="path" default="$(find uw_tests)/datasets/$(arg dataset)/"/>

	<!-- Coordinates of odom frame wrt the map frame. By default, the AUV start the mission here -->
	<arg name="x" default="0.0"/>
	<arg name="y" default="0.0"/>
	<arg name="z" default="0.0"/>
	<arg name="roll" default="0.0"/>
	<arg name="pitch" default="0.0"/>
	<arg name="yaw" default="0.0"/>

	<group ns="$(arg namespace)">

        <!-- Hugin model -->
        <param name="robot_description" command="$(find xacro)/xacro '$(find hugin_description)/robots/hugin_auv_default.urdf.xacro' debug:=$(arg debug) namespace:=$(arg namespace)" />
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen">
        </node>

        <node pkg="tf" type="static_transform_publisher" name="tf_map_odom_pub" 
                args="$(arg x) $(arg y) $(arg z) $(arg yaw) $(arg pitch) $(arg roll) map $(arg namespace)/odom 50" />

        <node pkg="auv_model" type="auv_motion_model" name="auv_motion_model" output="screen">
            <param name="odom_rate" value="$(arg odom_rate)" />
            <param name="meas_rate" value="$(arg meas_rate)" />
            <param name="odom_sim" value="/$(arg mode)/$(arg namespace)/odom" />
            <param name="mbes_pings_topic" value="/$(arg mode)/$(arg namespace)/mbes_pings" />
            <param name="world_frame" value="world" />
            <param name="map_frame" value="map" />
            <param name="odom_frame" value="$(arg namespace)/odom" />
            <param name="base_link" value="$(arg namespace)/base_link" />
            <param name="mbes_link" value="$(arg namespace)/mbes_link" />
            <param name="throttle_cmd" value="/throttle_cmd" />
            <param name="thruster_cmd" value="/thruster_cmd" />
            <param name="inclination_cmd" value="/inclination_cmd" />
            <param name="mbes_sim_as" value="/$(arg namespace)/mbes_sim_server" />
            <param name="n_beams_mbes" value="$(arg n_beams_mbes)" />
            <param name="synch_topic" value="/$(arg app)/synch" />
        </node>

        <!-- <node pkg="auv_model" type="auv_sim_teleop.py" name="auv_sim_teleop" output="screen">
			<param name="throttle_cmd" value="/$(arg namespace)/throttle_cmd" />
			<param name="thruster_cmd" value="/$(arg namespace)/thruster_cmd" />
			<param name="inclination_cmd" value="/$(arg namespace)/inclination_cmd" />
		</node> -->

        <node pkg="auv_model" type="auv_mbes_model.py" name="auv_mbes_model" output="screen">
            <param name="mbes_open_angle" value="$(arg mbes_open_angle)" />
            <param name="mbes_link" value="$(arg namespace)/mbes_link" />
            <param name="mbes_sim_as" value="/$(arg namespace)/mbes_sim_server" /> 
            <param name="server_mode" value="True" if="$(eval mode == 'sim')"/>    
            <param name="server_mode" value="False" unless="$(eval mode == 'sim')"/> 
            <!-- <param name="sound_velocity_prof" value="$(find uw_tests)/datasets/$(arg dataset)/svp.cereal" />        -->
            <param name="sound_velocity_prof" value="$(arg path)/svp.cereal" />       
            <param name="mesh_path" value="$(arg path)/mesh.npz" />       
        </node>

        <group if="$(arg multi_agent)">
            <node pkg="auv_model" type="auv_multi.py" name="fake_synch_srv" output="screen">
                <param name="synch_topic" value="/$(arg app)/synch" />
            </node>
        </group>
        <!-- Useful rosbags for replaying controls -->
        <!-- <node pkg="rosbag" type="play" name="controls" 
                args="$(find uw_tests)/slam/$(arg dataset)/big_loop.bag"/> -->
        
        <!-- <node pkg="rosbag" type="record" name="record_mission_ctrl" output="screen" 
                args="-O $(find rbpf_slam)/launch/lc_test.bag /hugin/throttle_cmd /hugin/thruster_cmd /hugin/inclination_cmd"/> -->
    </group>

</launch>
